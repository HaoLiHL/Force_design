#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  1 21:53:54 2022

@author: lihao
"""


import matplotlib.pyplot as plt
import numpy as np
real_E = [-259924.0986058375, -259883.7011980016, -259883.7011980016, -259883.7011980016, -259862.73884425985, -259822.44996232697, -259778.38783015858, -259723.13850497946, -259672.12690350783, -259617.44307099527, -259562.66742504042, -259508.23826693365, -258686.7896734143, -259095.0887622307, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964, -259070.5729461964]
fig, ax = plt.subplots((1))

#plt.plot(np.abs(E_predict_rec))
ax.plot(np.arange(len(real_E)),-np.array(real_E).reshape(-1), color = 'r',marker = 'o')
ax.axhline(y=259000, color='r', linestyle='--', label = 'target')
ax.axhline(y=259912, color='b', linestyle='--', label = 'minimum value from training')
ax.axhline(y=259932, color='b', linestyle='--', label = 'maximum value from training')
ax.set_xlabel('number of evaluation')
ax.set_ylabel('real designed energy from simulator')
ax.legend()
#ax.plot(np.arange(len(E_var_rec1)),np.array(E_var_rec1).reshape(-1), color = 'b')
ax.set_title('c = 0.1')


plt.show()


real_E = [-259924.0986058375, -259673.10532618748, -259673.10532618748, -259610.02897153745, -259490.04987957043, -259351.3120945087, -259193.62805674123, -259013.16747872464, -258790.9494916843, -258556.96543889656, -258339.34988873932, -258141.53788560213]
fig, ax = plt.subplots((1))

#plt.plot(np.abs(E_predict_rec))
ax.plot(np.arange(len(real_E)),-np.array(real_E).reshape(-1), color = 'r',marker = 'o')
ax.axhline(y=257000, color='r', linestyle='--', label = 'target')
ax.axhline(y=259912, color='b', linestyle='--', label = 'minimum value from training')
ax.axhline(y=259932, color='b', linestyle='--', label = 'maximum value from training')
ax.set_xlabel('number of evaluation')
ax.set_ylabel('real designed energy from simulator')
ax.legend()
#ax.plot(np.arange(len(E_var_rec1)),np.array(E_var_rec1).reshape(-1), color = 'b')
ax.set_title('c = 0.5')


plt.show()

# c is 0.5
real_E = [-259924.0986058375, -259673.10532618748, -259673.10532618748, -259610.02897153745, -259490.04987957043, -259351.3120945087, -259193.62805674123, -259013.16747872464, -258790.9494916843, -258556.96543889656, -258339.34988873932, -258141.53788560213, -257965.93078251986, -256745.94329148944, -256981.97870112295, -257000.8886468779, -257000.8886468779, -257000.04258718918, -257000.00684731556, -257000.00684731556, -257000.00684731556, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905]
predict_E = [-259924.0986058375, -259673.10532618748, -259673.10532618748, -259610.02897153745, -259490.04987957043, -259351.3120945087, -259193.62805674123, -259013.16747872464, -258790.9494916843, -258556.96543889656, -258339.34988873932, -258141.53788560213, -257965.93078251986, -256745.94329148944, -256981.97870112295, -257000.8886468779, -257000.8886468779, -257000.04258718918, -257000.00684731556, -257000.00684731556, -257000.00684731556, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905, -256999.9944423905]

fig, ax = plt.subplots((1))

#plt.plot(np.abs(E_predict_rec))
ax.plot(np.arange(len(real_E)),-np.array(real_E).reshape(-1), color = 'r',marker = 'o',label="real")
ax.plot(np.arange(len(predict_E)),-np.array(predict_E).reshape(-1), color = 'b',marker = '.',label="predict")
ax.axhline(y=257000, color='r', linestyle='--', label = 'target')
ax.axhline(y=259912, color='b', linestyle='--', label = 'minimum value from training')
ax.axhline(y=259932, color='b', linestyle='--', label = 'maximum value from training')
ax.set_xlabel('number of evaluation')
ax.set_ylabel('real designed energy from simulator')
ax.legend()
#ax.plot(np.arange(len(E_var_rec1)),np.array(E_var_rec1).reshape(-1), color = 'b')
ax.set_title('c = 0.5')


plt.show()


# c is 0.1
real_E = [-259924.0986058375, -259673.10532618748, -259582.70444649033, -259436.19206201853, -259274.99595757527, -259104.82361092977, -258907.70894205122, -258581.0211127221, -258224.01761145223, -258020.6016746554, -257848.0571142551, -257508.92552490556, -256957.6856200097, -257022.6957011246, -256993.23491467015, -256994.91249640752, -256996.06765673633, -257003.56172370128, -257003.56172370128, -256999.41156513547, -256999.41156513547, -256999.41156513547, -256999.41156513547, -256999.41156513547, -257000.10022194043, -257000.10022194043, -257000.10022194043, -257000.10022194043, -257000.10022194043, -257000.10022194043, -257000.10022194043, -257000.10022194043]

predict_E = [-259924.0986058375, -259817.89096669,-259603.75082688,-259445.35540964,-259281.22940673,-259110.26655572,-258913.51229073
 ,-258590.00451996,-258232.50960648,-258023.03873018,-257848.95824599,-257511.5433004,-256964.43820131
 ,-257022.55741833,-256993.21231361,-256994.9056672,-256996.06390278,-257003.56308055,-257003.56276407,
 -256999.39706051,-256999.40550078,-256999.40773157,-256999.40876254,-256999.40935648,-257000.09925852,-257000.09934239,-257000.09941282,-257000.09947277,
 -257000.09952449,-257000.09956956,-257000.09960915,-257000.09964419]
fig, ax = plt.subplots((1))

#plt.plot(np.abs(E_predict_rec))
ax.plot(np.arange(len(real_E)),-np.array(real_E).reshape(-1), color = 'r',marker = 'o',label="real")
ax.plot(np.arange(len(predict_E)),-np.array(predict_E).reshape(-1), color = 'b',marker = '.',label="predict")
ax.axhline(y=257000, color='r', linestyle='--', label = 'target')
ax.axhline(y=259912, color='b', linestyle='--', label = 'minimum value from training')
ax.axhline(y=259932, color='b', linestyle='--', label = 'maximum value from training')
ax.set_xlabel('number of evaluation')
ax.set_ylabel('real designed energy from simulator')
ax.legend()
#ax.plot(np.arange(len(E_var_rec1)),np.array(E_var_rec1).reshape(-1), color = 'b')
ax.set_title('c = 0.1')


plt.show()


